#include "player.h"


unsigned int getRandInt(const unsigned int max)
{
    // limit the random number to the max as the operator %
    // gives the residual of the division.
    // Thus if we divide the random number generated by rand()
    // by "max" the residual of the division can only be smaller
    // then "max"
    return static_cast<unsigned int>(rand()) % max;
}



Player::Player()
{
    //  Ranged based for loop
    for(auto& row : player_grid)
        for(auto& box : row)
            box = 0;

    //  This is a way to initialize a vector
    // In the parentesis we initialize the the pair where the
    // numbers are separeted by a comma
    std::vector<std::pair<unsigned int, unsigned int>> boats_list{
        {5, 1},
        {4, 2},
        {3, 3},
        {3, 4},
    };

    for (const auto& [boat_length, boat_type]: boats_list) {
        const bool vertical_boat = getRandInt(2);

        unsigned int row, col;

        if(vertical_boat){
            row = getRandInt(10 - boat_length);
            col = getRandInt(10);
        } else {
            col = getRandInt(10 - boat_length);
            row = getRandInt(10);
        }

        for(unsigned int step=0; step<5; step++){
            if(vertical_boat)
                player_grid[row + step][col] = boat_type;
            else
                player_grid[row][col + step] = boat_type;
        }
    }


}

// Define what the function does in the .cpp
void Player::showPlayerGrid()
{
    const unsigned int columns_number = 10;
    const unsigned int rows_number = 10;

    std::cout << "  ";
    for(unsigned int col=0; col<columns_number; col++){
        std::cout << col << " ";
    }
    std::cout << std::endl;

    for (unsigned int row=0;row< rows_number;row++) {
        std::cout << row << " ";
        for(unsigned int col=0; col<columns_number; col++){
//            std::cout << "~ ";
            switch(player_grid[row][col]){
            case 1:
                std::cout << "A ";
                break;
            case 2:
                std::cout << "C ";
                break;
            case 3:
                std::cout << "D ";
                break;
            case 4:
                std::cout << "S ";
                break;
            default:
                std::cout << "~ ";
            }

        }
        std::cout << std::endl;

    }
}


//  This function generate the addresses (row and col) coved by the ship
std::vector<std::pair<unsigned int,
unsigned int>> Player::placeBoatRandomly(const unsigned int boat_length)
{

    std::vector<std::pair<unsigned int, unsigned int>> boat_addresses;

    const bool vertical_boat = getRandInt(2);

    unsigned int row, col;

    if(vertical_boat){
        row = getRandInt(10 - boat_length);
        col = getRandInt(10);
    } else {
        col = getRandInt(10 - boat_length);
        row = getRandInt(10);
    }

    for(unsigned int step=0; step<5; step++){
        if(vertical_boat)
            boat_addresses.push_back({row + step, col});
        //  Add an element in the end of the vector
        else
            boat_addresses.push_back({row, col + step});
    }

    //  Return the generated vector
    return boat_addresses;
}
